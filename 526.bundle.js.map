{"version":3,"file":"526.bundle.js","mappings":"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","sources":["webpack://frontend-performance-basecamp/./src/utils/apiClient.ts","webpack://frontend-performance-basecamp/./src/apis/gifAPIService.ts","webpack://frontend-performance-basecamp/./src/pages/Search/hooks/useGifSearch.tsx","webpack://frontend-performance-basecamp/./src/pages/Search/components/SearchBar/SearchBar.module.css?6e52","webpack://frontend-performance-basecamp/./src/pages/Search/components/SearchBar/SearchBar.tsx","webpack://frontend-performance-basecamp/./src/pages/Search/components/ResultTitle/ResultTitle.module.css?5009","webpack://frontend-performance-basecamp/./src/pages/Search/components/ResultTitle/ResultTitle.tsx","webpack://frontend-performance-basecamp/./src/pages/Search/components/GifItem/GifItem.tsx","webpack://frontend-performance-basecamp/./src/pages/Search/components/GifItem/GifItem.module.css?f94b","webpack://frontend-performance-basecamp/./src/pages/Search/components/SearchResult/SearchResult.tsx","webpack://frontend-performance-basecamp/./src/pages/Search/components/SearchResult/SearchResult.module.css?fa48","webpack://frontend-performance-basecamp/./src/pages/Search/components/ArtistInfo/ArtistInfo.module.css?1a7e","webpack://frontend-performance-basecamp/./src/pages/Search/components/ArtistInfo/ArtistInfo.tsx","webpack://frontend-performance-basecamp/./src/pages/Search/components/ArtistList/ArtistList.tsx","webpack://frontend-performance-basecamp/./src/pages/Search/components/HelpPanel/artistUtil.ts","webpack://frontend-performance-basecamp/./src/pages/Search/components/HelpPanel/HelpPanel.module.css?d962","webpack://frontend-performance-basecamp/./src/pages/Search/components/HelpPanel/HelpPanel.tsx","webpack://frontend-performance-basecamp/./src/pages/Search/Search.tsx","webpack://frontend-performance-basecamp/./src/pages/Search/Search.module.css?33b5"],"sourcesContent":["export class ApiError extends Error {\r\n  constructor(public status: number, message?: string) {\r\n    super(message);\r\n    this.name = 'ApiError';\r\n  }\r\n}\r\n\r\nexport const apiClient = {\r\n  fetch: async <T>(url: URL): Promise<T> => {\r\n    const response = await fetch(url.toString());\r\n    if (!response.ok) {\r\n      throw new ApiError(response.status, `HTTP error! status: ${response.status}`);\r\n    }\r\n    return response.json();\r\n  },\r\n\r\n  appendSearchParams: (url: URL, params: Record<string, string>): URL => {\r\n    const newUrl = new URL(url.toString());\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      newUrl.searchParams.append(key, value);\r\n    });\r\n    return newUrl;\r\n  }\r\n};\r\n","import { GifsResult } from '@giphy/js-fetch-api';\r\nimport { IGif } from '@giphy/js-types';\r\n\r\nimport { GifImageModel } from '../models/image/gifImage';\r\nimport { apiClient, ApiError } from '../utils/apiClient';\r\n\r\nconst API_KEY = process.env.GIPHY_API_KEY;\r\nif (!API_KEY) {\r\n  throw new Error('GIPHY_API_KEY is not set in environment variables');\r\n}\r\n\r\nconst BASE_URL = 'https://api.giphy.com/v1/gifs';\r\nconst DEFAULT_FETCH_COUNT = 16;\r\n\r\nconst convertResponseToModel = (gifList: IGif[]): GifImageModel[] => {\r\n  return gifList.map(({ id, title, images }) => {\r\n    return {\r\n      id,\r\n      title: title ?? '',\r\n      imageUrl: images.original.url\r\n    };\r\n  });\r\n};\r\n\r\nconst fetchGifs = async (url: URL): Promise<GifImageModel[]> => {\r\n  try {\r\n    const gifs = await apiClient.fetch<GifsResult>(url);\r\n\r\n    return convertResponseToModel(gifs.data);\r\n  } catch (error) {\r\n    if (error instanceof ApiError) {\r\n      console.error(`API Error: ${error.status} - ${error.message}`);\r\n    } else {\r\n      console.error('Unexpected error:', error);\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const gifAPIService = {\r\n  /**\r\n   * treding gif 목록을 가져옵니다.\r\n   * @returns {Promise<GifImageModel[]>}\r\n   * @ref https://developers.giphy.com/docs/api/endpoint#!/gifs/trending\r\n   */\r\n  getTrending: async (): Promise<GifImageModel[]> => {\r\n    const url = apiClient.appendSearchParams(new URL(`${BASE_URL}/trending`), {\r\n      api_key: API_KEY,\r\n      limit: `${DEFAULT_FETCH_COUNT}`,\r\n      rating: 'g'\r\n    });\r\n\r\n    return fetchGifs(url);\r\n  },\r\n  /**\r\n   * 검색어에 맞는 gif 목록을 가져옵니다.\r\n   * @param {string} keyword\r\n   * @param {number} page\r\n   * @returns {Promise<GifImageModel[]>}\r\n   * @ref https://developers.giphy.com/docs/api/endpoint#!/gifs/search\r\n   */\r\n  searchByKeyword: async (keyword: string, page: number): Promise<GifImageModel[]> => {\r\n    const url = apiClient.appendSearchParams(new URL(`${BASE_URL}/search`), {\r\n      api_key: API_KEY,\r\n      q: keyword,\r\n      limit: `${DEFAULT_FETCH_COUNT}`,\r\n      offset: `${page * DEFAULT_FETCH_COUNT}`,\r\n      rating: 'g',\r\n      lang: 'en'\r\n    });\r\n\r\n    return fetchGifs(url);\r\n  }\r\n};\r\n","import { ChangeEvent, useEffect, useState } from 'react';\r\n\r\nimport { gifAPIService } from '../../../apis/gifAPIService';\r\nimport { GifImageModel } from '../../../models/image/gifImage';\r\n\r\nconst DEFAULT_PAGE_INDEX = 0;\r\n\r\nexport const SEARCH_STATUS = {\r\n  BEFORE_SEARCH: 'BEFORE_SEARCH',\r\n  LOADING: 'LOADING',\r\n  FOUND: 'FOUND',\r\n  NO_RESULT: 'NO_RESULT',\r\n  ERROR: 'ERROR'\r\n} as const;\r\n\r\nexport type SearchStatus = typeof SEARCH_STATUS[keyof typeof SEARCH_STATUS];\r\n\r\nconst useGifSearch = () => {\r\n  const [status, setStatus] = useState<SearchStatus>(SEARCH_STATUS.BEFORE_SEARCH);\r\n  const [currentPageIndex, setCurrentPageIndex] = useState(DEFAULT_PAGE_INDEX);\r\n  const [gifList, setGifList] = useState<GifImageModel[]>([]);\r\n  const [searchKeyword, setSearchKeyword] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\r\n\r\n  const updateSearchKeyword = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setSearchKeyword(e.target.value);\r\n  };\r\n\r\n  const resetSearch = () => {\r\n    setStatus(SEARCH_STATUS.LOADING);\r\n    setCurrentPageIndex(DEFAULT_PAGE_INDEX);\r\n    setGifList([]);\r\n    setErrorMessage(null);\r\n  };\r\n\r\n  const handleError = (error: unknown) => {\r\n    setStatus(SEARCH_STATUS.ERROR);\r\n    setErrorMessage(error instanceof Error ? error.message : 'An unknown error occurred');\r\n  };\r\n\r\n  const searchByKeyword = async (): Promise<void> => {\r\n    resetSearch();\r\n\r\n    try {\r\n      const gifs = await gifAPIService.searchByKeyword(searchKeyword, DEFAULT_PAGE_INDEX);\r\n\r\n      if (gifs.length === 0) {\r\n        setStatus(SEARCH_STATUS.NO_RESULT);\r\n        return;\r\n      }\r\n\r\n      setGifList(gifs);\r\n      setStatus(SEARCH_STATUS.FOUND);\r\n    } catch (error) {\r\n      handleError(error);\r\n    }\r\n  };\r\n\r\n  const loadMore = async (): Promise<void> => {\r\n    const nextPageIndex = currentPageIndex + 1;\r\n\r\n    try {\r\n      const newGitList = await gifAPIService.searchByKeyword(searchKeyword, nextPageIndex);\r\n\r\n      setGifList((prevGifList) => [...prevGifList, ...newGitList]);\r\n      setCurrentPageIndex(nextPageIndex);\r\n    } catch (error) {\r\n      handleError(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchTrending = async () => {\r\n      if (status !== SEARCH_STATUS.BEFORE_SEARCH) return;\r\n\r\n      try {\r\n        const gifs = await gifAPIService.getTrending();\r\n        setGifList(gifs);\r\n      } catch (error) {\r\n        handleError(error);\r\n      }\r\n    };\r\n\r\n    fetchTrending();\r\n  }, []);\r\n\r\n  return {\r\n    status,\r\n    searchKeyword,\r\n    gifList,\r\n    errorMessage,\r\n    searchByKeyword,\r\n    updateSearchKeyword,\r\n    loadMore\r\n  } as const;\r\n};\r\n\r\nexport default useGifSearch;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"searchbarSection\":\"_yRyLCVW_8BrXNu2Ae1I\",\"searchbarContainer\":\"p1yl5o1LGzbcgKpLvnzP\",\"searchbarTitle\":\"tmllUNaCFiCyJ_2LTNUL\",\"searchInput\":\"XZuzNzJP7hkmuiygaxt6\",\"searchButton\":\"_HPJ5AEs_c3uawxix3Uk\"};","import React from 'react';\r\nimport { AiOutlineSearch } from 'react-icons/ai';\r\n\r\nimport styles from './SearchBar.module.css';\r\n\r\ntype SearchbarProps = {\r\n  searchKeyword: string;\r\n  onEnter: (e: React.KeyboardEvent<HTMLInputElement>) => void;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  onSearch: () => void;\r\n};\r\n\r\nconst SearchBar = ({ searchKeyword, onEnter, onChange, onSearch }: SearchbarProps) => {\r\n  return (\r\n    <section className={styles.searchbarSection}>\r\n      <h3 className={styles.searchbarTitle}>- find the best gif now -</h3>\r\n      <div className={styles.searchbarContainer}>\r\n        <input\r\n          className={styles.searchInput}\r\n          type=\"text\"\r\n          value={searchKeyword}\r\n          onKeyUp={onEnter}\r\n          onChange={onChange}\r\n        />\r\n        <button className={styles.searchButton} type=\"button\" onClick={onSearch}>\r\n          <AiOutlineSearch color=\"white\" size=\"2rem\" />\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"resultTitle\":\"bMX5kwo8awW0wG6uP_MM\"};","import { SearchStatus, SEARCH_STATUS } from '../../hooks/useGifSearch';\r\n\r\nimport styles from './ResultTitle.module.css';\r\n\r\ntype ResultTitleProps = {\r\n  status: SearchStatus;\r\n};\r\n\r\nconst ResultTitle = ({ status }: ResultTitleProps) => {\r\n  switch (status) {\r\n    case SEARCH_STATUS.NO_RESULT:\r\n      return (\r\n        <h3 className={styles.resultTitle}>\r\n          <span>Nothing</span>🥲\r\n        </h3>\r\n      );\r\n    case SEARCH_STATUS.BEFORE_SEARCH:\r\n      return (\r\n        <h3 className={styles.resultTitle}>\r\n          🔥 <span>Trending Now</span> 🔥\r\n        </h3>\r\n      );\r\n    case SEARCH_STATUS.ERROR:\r\n      return (\r\n        <h3 className={styles.resultTitle}>\r\n          <span>Something Went Wrong</span>🥲\r\n        </h3>\r\n      );\r\n    default:\r\n      return (\r\n        <h3 className={styles.resultTitle}>\r\n          <span>We Found...</span>\r\n        </h3>\r\n      );\r\n  }\r\n};\r\n\r\nexport default ResultTitle;\r\n","import { memo, Profiler } from 'react';\r\nimport { GifImageModel } from '../../../../models/image/gifImage';\r\n\r\nimport styles from './GifItem.module.css';\r\n\r\ntype GifItemProps = Omit<GifImageModel, 'id'>;\r\n\r\nconst GifItem = ({ imageUrl = '', title = '' }: GifItemProps) => {\r\n  return (\r\n    <Profiler\r\n      id=\"GiftItemProfiler\"\r\n      onRender={(id, phase, actualTime, baseTime, startTime, commitTime) =>\r\n        console.table({ id, phase, actualTime, baseTime, startTime, commitTime })\r\n      }\r\n    >\r\n      <div className={styles.gifItem}>\r\n        <img className={styles.gifImage} src={imageUrl} />\r\n        <div className={styles.gifTitleContainer}>\r\n          <div className={styles.gifTitleBg}></div>\r\n          <h4 className={styles.gifTitle}>{title}</h4>\r\n        </div>\r\n      </div>\r\n    </Profiler>\r\n  );\r\n};\r\n\r\nexport default memo(GifItem);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"gifItem\":\"d9Kx4D_C6coYB4Bq3Y_D\",\"gifImage\":\"_qDfMSZFh0Sj5QB2_372\",\"gifTitleContainer\":\"jmVam4uDiwDe9X0kov9s\",\"gifTitleBg\":\"bESWa5xgNgk178EbWGcc\",\"gifTitle\":\"x8ChTAzHTz86NM8umGRm\"};","import { GifImageModel } from '../../../../models/image/gifImage';\r\n\r\nimport ResultTitle from '../ResultTitle/ResultTitle';\r\nimport GifItem from '../GifItem/GifItem';\r\n\r\nimport { SearchStatus, SEARCH_STATUS } from '../../hooks/useGifSearch';\r\n\r\nimport styles from './SearchResult.module.css';\r\n\r\ntype SearchResultProps = {\r\n  status: SearchStatus;\r\n  gifList: GifImageModel[];\r\n  loadMore: () => void;\r\n};\r\n\r\nconst SearchResult = ({ status, gifList, loadMore }: SearchResultProps) => {\r\n  const renderGifList = () => (\r\n    <div className={styles.gifResultWrapper}>\r\n      {gifList.map((gif: GifImageModel) => (\r\n        <GifItem key={gif.id} imageUrl={gif.imageUrl} title={gif.title} />\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n  const renderLoadMoreButton = () => (\r\n    <button className={styles.loadMoreButton} onClick={loadMore}>\r\n      load more\r\n    </button>\r\n  );\r\n\r\n  const renderContent = () => {\r\n    switch (status) {\r\n      case SEARCH_STATUS.FOUND:\r\n        return (\r\n          <>\r\n            {renderGifList()}\r\n            {renderLoadMoreButton()}\r\n          </>\r\n        );\r\n      case SEARCH_STATUS.BEFORE_SEARCH:\r\n        return renderGifList();\r\n      case SEARCH_STATUS.NO_RESULT:\r\n      case SEARCH_STATUS.ERROR:\r\n      default:\r\n        return <></>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className={styles.searchResultSection}>\r\n      <ResultTitle status={status} />\r\n      {renderContent()}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SearchResult;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"searchResultSection\":\"de2qwsei5MNiz7eV4rNm\",\"gifResultWrapper\":\"Sk1D0Qs59YRDsSi_PLe_\",\"loadMoreButton\":\"qrKiKyOk1oFYBTmViAam\"};","// extracted by mini-css-extract-plugin\nexport default {\"artistContainer\":\"WS5RuQ_x18SikZHTRyke\",\"profileImage\":\"XNLKxvyVOVu8lOJJSdAt\",\"profileUrl\":\"mdtZcvbaOpN76XOUKbzG\"};","import { Artist } from '../../../../models/help/artist';\r\n\r\nimport styles from './ArtistInfo.module.css';\r\n\r\nexport type ArtistProps = {\r\n  artist: Artist;\r\n};\r\n\r\nconst ArtistInfo = ({ artist }: ArtistProps) => {\r\n  const { name, profileUrl, profileImageUrl } = artist;\r\n\r\n  return (\r\n    <li className={styles.artistContainer}>\r\n      <img className={styles.profileImage} src={profileImageUrl} />\r\n      <p>\r\n        <a className={styles.profileUrl} href={profileUrl}>\r\n          {name}\r\n        </a>\r\n      </p>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ArtistInfo;\r\n","import { Artist } from '../../../../models/help/artist';\r\nimport ArtistInfo from '../ArtistInfo/ArtistInfo';\r\n\r\ntype ArtistListProps = {\r\n  artists: Artist[];\r\n};\r\n\r\nconst ArtistList = ({ artists }: ArtistListProps) => {\r\n  return (\r\n    <ul>\r\n      {artists.map((artist, index) => {\r\n        return <ArtistInfo key={index} artist={artist} />;\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ArtistList;\r\n","import { Artist } from '../../../../models/help/artist';\r\n\r\nconst DUMMY_ARTISTS_LENGTH = 100;\r\nconst DUMMY_ARTISTS: Artist[] = [\r\n  {\r\n    name: 'Pola Lucas',\r\n    profileUrl: 'https://giphy.com/polalucas',\r\n    profileImageUrl: 'https://media4.giphy.com/media/gwWAA4PYJLTtyOHkUD/giphy.gif'\r\n  },\r\n  {\r\n    name: 'Yizr',\r\n    profileUrl: 'https://giphy.com/yizr',\r\n    profileImageUrl:\r\n      'https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExbjE3YWc2Ym02aWxrMDVweDRkNHRiZjdtejhxZTNuNGxlYWZqOWx4YyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/UJnRqJWD0KrbW/giphy.webp'\r\n  },\r\n  {\r\n    name: 'YUNGSUNG',\r\n    profileUrl: 'https://giphy.com/yungsung',\r\n    profileImageUrl: 'https://media0.giphy.com/media/lgnOH6bhb1QpUm2k6w/giphy.gif'\r\n  },\r\n  {\r\n    name: 'Kev Lavery',\r\n    profileUrl: 'https://giphy.com/kevlavery',\r\n    profileImageUrl: 'https://media1.giphy.com/media/ZPLluhRJiGwSttn7i2/giphy.gif'\r\n  },\r\n  {\r\n    name: 'Lorna Mills',\r\n    profileUrl: 'https://giphy.com/lornamills',\r\n    profileImageUrl: 'https://media1.giphy.com/media/l0Iyn1gGtCPa3x41a/200.gif'\r\n  }\r\n];\r\n\r\nconst artists = Array.from(\r\n  { length: DUMMY_ARTISTS_LENGTH },\r\n  (_v, k) => DUMMY_ARTISTS[k % DUMMY_ARTISTS.length]\r\n);\r\n\r\nexport const getArtists = () => artists;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"floatingButton\":\"jQBPp9XzUlR0s47cyMvy\",\"selectedItemContainer\":\"bI_mJt1zrVbU9rgQ8O9a\",\"showSheet\":\"_xMBJVElyMLYg2be4I3S\",\"sheetTitleContainer\":\"p259JqbBpFGYE_NkFPXj\",\"sheetContentsContainer\":\"_4uL_W0scH3KiWMUSa8z\"};","import { useState } from 'react';\r\nimport { AiOutlineInfo, AiOutlineClose } from 'react-icons/ai';\r\nimport classNames from 'classnames/bind';\r\n\r\nimport ArtistList from '../ArtistList/ArtistList';\r\nimport { getArtists } from './artistUtil';\r\n\r\nimport styles from './HelpPanel.module.css';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst HelpPanel = () => {\r\n  const artists = getArtists();\r\n  const [isShow, setIsShow] = useState(false);\r\n  const openSheet = () => setIsShow(true);\r\n  const closeSheet = () => setIsShow(false);\r\n\r\n  return (\r\n    <>\r\n      <button type=\"button\" className={styles.floatingButton} onClick={openSheet}>\r\n        <AiOutlineInfo color=\"white\" size=\"24px\" />\r\n      </button>\r\n      <section\r\n        className={cx('selectedItemContainer', {\r\n          showSheet: isShow\r\n        })}\r\n      >\r\n        <div className={styles.sheetTitleContainer}>\r\n          <h4>What's all this? </h4>\r\n          <button type=\"button\" onClick={closeSheet}>\r\n            <AiOutlineClose size=\"24px\" />\r\n          </button>\r\n        </div>\r\n        <div className={styles.sheetContentsContainer}>\r\n          <img src=\"https://media0.giphy.com/media/3oKIPdiPGxPI7Dze7u/giphy.gif?cid=ecf05e475f5bct6ci09g3pgn43nf6bausx33fj7f96f6ig92&rid=giphy.gif&ct=g\" />\r\n          <p>\r\n            'memegle' is powered by GIPHY, the top source for the best & newest GIFs & Animated\r\n            Stickers online. You can find any gif uploaded on GIPHY here.\r\n          </p>\r\n          <br />\r\n\r\n          <img src=\"https://giphy.com/static/img/artistdirectory_1040.gif\" />\r\n          <p>\r\n            If you want more, you are always welcome to contribute as an artist. Please refer to the\r\n            guideline&nbsp;\r\n            <a href=\"https://support.giphy.com/hc/en-us/articles/360019977552-How-to-Upload\">\r\n              here\r\n            </a>\r\n            &nbsp;and upload your work!\r\n          </p>\r\n          <br />\r\n          <p>Here are some artists you can refer to.</p>\r\n          <br />\r\n          <section>\r\n            <ArtistList artists={artists} />\r\n          </section>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HelpPanel;\r\n","import { KeyboardEvent } from 'react';\r\nimport useGifSearch from './hooks/useGifSearch';\r\n\r\nimport SearchBar from './components/SearchBar/SearchBar';\r\nimport SearchResult from './components/SearchResult/SearchResult';\r\nimport HelpPanel from './components/HelpPanel/HelpPanel';\r\n\r\nimport styles from './Search.module.css';\r\n\r\nconst Search = () => {\r\n  const { status, searchKeyword, gifList, searchByKeyword, updateSearchKeyword, loadMore } =\r\n    useGifSearch();\r\n\r\n  const handleEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      searchByKeyword();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.searchContainer}>\r\n      <SearchBar\r\n        searchKeyword={searchKeyword}\r\n        onEnter={handleEnter}\r\n        onChange={updateSearchKeyword}\r\n        onSearch={searchByKeyword}\r\n      />\r\n      <SearchResult status={status} gifList={gifList} loadMore={loadMore} />\r\n      <HelpPanel />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"searchContainer\":\"OXPtcxG6dhJUUZLVn9IN\",\"searchbarSection\":\"_NVurYTpiByfxlisvpzR\",\"searchbarContainer\":\"_IBmZT37YgXzAkcOC_ok\",\"searchbarTitle\":\"emmqCq0u8mPloc40zVmg\",\"searchInput\":\"AIq4k7cZS1EdCykvp5UL\",\"searchButton\":\"_FmPgcKZk2dzVoB60gPV\",\"searchIcon\":\"somzxAx_KoUk4uhEaNQ6\",\"searchResultSection\":\"CNXgYCzg4EJ6YGYjz5yr\",\"resultTitle\":\"NNemcyhYzsoUl3coudLV\",\"gifResultWrapper\":\"P7wROLtiW0M4yQTzvq4W\",\"loadMoreButton\":\"eod4_bWPbqsZatbh_Wd3\"};"],"names":["ApiError","Error","constructor","status","message","super","this","name","apiClient","url","response","fetch","toString","ok","json","params","newUrl","URL","Object","entries","forEach","key","value","searchParams","append","API_KEY","BASE_URL","fetchGifs","data","map","id","title","images","imageUrl","original","error","console","gifAPIService","keyword","page","api_key","q","limit","offset","rating","lang","SEARCH_STATUS","setStatus","useState","currentPageIndex","setCurrentPageIndex","gifList","setGifList","searchKeyword","setSearchKeyword","errorMessage","setErrorMessage","handleError","useEffect","gifs","searchByKeyword","length","updateSearchKeyword","e","target","loadMore","nextPageIndex","newGitList","prevGifList","onEnter","onChange","onSearch","className","type","onKeyUp","onClick","color","size","memo","Profiler","onRender","phase","actualTime","baseTime","startTime","commitTime","table","src","renderGifList","gif","renderContent","artist","profileUrl","profileImageUrl","href","artists","index","DUMMY_ARTISTS","Array","from","_v","k","getArtists","cx","isShow","setIsShow","floatingButton","showSheet","sheetTitleContainer","sheetContentsContainer"],"sourceRoot":""}